# RAPIDS Dockerfile for {{ os }} "devel" image
#
# RAPIDS is built from-source and installed in the base conda environment. The
# sources and toolchains to build RAPIDS are included in this image. RAPIDS
# jupyter notebooks are also provided, as well as jupyterlab and all the
# dependencies required to run them.
#
# Copyright (c) {{ now.year }}, NVIDIA CORPORATION.

ARG CUDA_VER={{ DEFAULT_CUDA_VERSION }}
ARG LINUX_VER={{ os }}
ARG PYTHON_VER={{ DEFAULT_PYTHON_VERSION }}
ARG RAPIDS_VER={{ RAPIDS_VERSION }}
ARG FROM_IMAGE=gpuci/rapidsai-enh-ccache-testing

FROM ${FROM_IMAGE}:${RAPIDS_VER}-cuda${CUDA_VER}-devel-${LINUX_VER}-py${PYTHON_VER}

{# Add ccache folder and status check for ccache #}
ADD ccache /ccache
RUN ccache -s

{# devel environment config args #}
ARG PARALLEL_LEVEL=16
ARG RAPIDS_VER={{ RAPIDS_VERSION }}*

ARG PYTHON_VER

ENV RAPIDS_DIR=/rapids

{% if "ubuntu" in os %}
{# gsfonts is used to correctly render fonts in doxygen/graphviz diagrams #}
RUN apt-get update && apt-get install -y \
    gsfonts \
    && rm -rf /var/lib/apt/lists/*
{% endif %}

{# 'rapidsdevtool.sh buildDockerImage' sets up the build context, including the
rapids directory being COPY'd below. See rapidsdevtool.sh help for details. #}
RUN mkdir -p ${RAPIDS_DIR}/utils {{ "${GCC7_DIR}/lib64" if "centos" in os }}
COPY start_jupyter.sh nbtest.sh nbtestlog2junitxml.py ${RAPIDS_DIR}/utils/

{# Install dependencies needed for devel: build deps + RAPIDS runtime deps +
notebook deps.  This is done as a single install to ensure compatibility
between packages. #}
{% include 'partials/env_debug.dockerfile.j2' %}

{# Install rapids-build-env and rapids-doc-env from conda meta-pkg #}
RUN gpuci_retry conda install -y -n rapids \
      rapids-build-env=${RAPIDS_VER} \
      rapids-doc-env=${RAPIDS_VER} \
    && conda remove -y -n rapids --force-remove \
      rapids-build-env=${RAPIDS_VER} \
      rapids-doc-env=${RAPIDS_VER}

{% include 'partials/env_debug.dockerfile.j2' %}

{% include 'partials/install_notebooks.dockerfile.j2' %}

{% if "centos" in os %}
{# Add compatible libm #}
COPY libm.so.6 ${GCC7_DIR}/lib64
{% endif %}

{# Clone RAPIDS libraries #}
RUN cd ${RAPIDS_DIR} \
  && source activate rapids \
{% for lib in RAPIDS_LIBS | sort(attribute="update_submodules,branch") %}
  && git clone -b {{ lib.branch }} --depth 1 --single-branch {{ lib.repo_url }} \
  && cd {{ lib.name }} \
  && git submodule update --init{{ ' --remote' if lib.update_submodules }} --recursive --no-single-branch --depth 1 {{ "\\" if not loop.last }}
  {{ "&& cd ${RAPIDS_DIR} \\" if not loop.last }}
{% endfor %}

{% if "centos" in os %}
{# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps
This will need to be removed later since it causes problems with certain runtime libs (numba.cuda) #}
ENV LD_LIBRARY_PATH_PREBUILD=${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs

{# Remove dmlc that is leftover from prior xgboost install #}
RUN mv /opt/conda/envs/rapids/include/dmlc/ /opt/conda/envs/rapids/include/dmlc-OFF
{% endif %}

{% include 'partials/devel_build.dockerfile.j2' %}

{% if "centos" in os %}
{# Change LD_LIBRARY_PATH to exclude /usr/local/cuda/* since
numba.cuda cannot load that, and instead have it load
/lib64/libcuda.so instead #}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH_PREBUILD}
{% endif %}

{# Report ccache stats and cleanup; also fix  #}
RUN ccache -s \
    && ccache -c \
    && chmod -R ugo+w /ccache

{# Cleaup conda and set ACLs for all users #}
{% include 'partials/cleanup-chmod.dockerfile.j2' %}

COPY .run_in_rapids.sh /.run_in_rapids
ENTRYPOINT [ "/usr/bin/tini", "--", "/.run_in_rapids" ]

{# Set the default command to pass to the ENTRYPOINT if no command was given #}
CMD [ "/bin/bash" ]
